navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(t=>{console.log("*** Service Worker registered ***")}).catch(function(t){console.log(t)}),function(){function t(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function e(e,n,r){var o,a=new Promise(function(a,s){t(o=e[n].apply(e,r)).then(a,s)});return a.request=o,a}function n(t,e,n){n.forEach(function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})})}function r(t,n,r,o){o.forEach(function(o){o in r.prototype&&(t.prototype[o]=function(){return e(this[n],o,arguments)})})}function o(t,e,n,r){r.forEach(function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})})}function a(t,n,r,o){o.forEach(function(o){o in r.prototype&&(t.prototype[o]=function(){return t=this[n],(r=e(t,o,arguments)).then(function(t){if(t)return new i(t,r.request)});var t,r})})}function s(t){this._index=t}function i(t,e){this._cursor=t,this._request=e}function u(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}})}function l(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new c(n)}function p(t){this._db=t}n(s,"_index",["name","keyPath","multiEntry","unique"]),r(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(i,"_cursor",["direction","key","primaryKey","value"]),r(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(i.prototype[e]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,r),t(n._request).then(function(t){if(t)return new i(t,n._request)})})})}),u.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},u.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(u,"_store",["name","keyPath","indexNames","autoIncrement"]),r(u,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(u,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(u,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new u(this._tx.objectStore.apply(this._tx,arguments))},n(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new u(this._db.createObjectStore.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},n(p,"_db",["name","version","objectStoreNames"]),o(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[u,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e,n=(e=arguments,Array.prototype.slice.call(e)),r=n[n.length-1],o=this._store||this._index,a=o[t].apply(o,n.slice(0,-1));a.onsuccess=function(){r(a.result)}})})}),[s,u].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise(function(o){n.iterateCursor(t,function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():o(r)):o(r)})})})});var h={open:function(t,n,r){var o=e(indexedDB,"open",[t,n]),a=o.request;return a&&(a.onupgradeneeded=function(t){r&&r(new l(a.result,t.oldVersion,a.transaction))}),o.then(function(t){return new p(t)})},delete:function(t){return e(indexedDB,"deleteDatabase",[t])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var API_URL="http://localhost:1337/restaurants",fetchStatus=0;class IDbOperationsHelper{static checkForIDbSupport(){return"indexedDB"in window?1:0}static openIDb(t,e,n){return idb.open(t,e,t=>{t.createObjectStore(n,{autoIncrement:!0})})}static addToDb(t,e,n,r){t.then(t=>{var o=t.transaction(e,n);return o.objectStore(e).put(r),o.complete}).then(t=>{console.log("Restaurant saved to IDB")})}static getAllData(t,e,n){t.then(t=>t.transaction(e).objectStore(n).getAll()).then(t=>{IDbOperationsHelper.setRestaurantsData(t)})}static getRestaurantsFromServer(t,e,n,r){fetch(API_URL).then(t=>t.json()).then(o=>{o.forEach(t=>{t=IDbOperationsHelper.addMissingData(t)}),1!=fetchStatus&&(fetchStatus=1,o.forEach(r=>{IDbOperationsHelper.addToDb(t,e,n,r)})),r(null,o)}).catch(t=>{r(t,null)})}static getRestaurantsData(t){var e=IDbOperationsHelper.openIDb("restaurants-data",1,"restaurants");e.then(t=>t.transaction("restaurants").objectStore("restaurants").getAll()).then(n=>{n.length<=0?IDbOperationsHelper.getRestaurantsFromServer(e,"restaurants","readwrite",t):t(null,n)})}static updateRestaurantData(t){IDbOperationsHelper.openIDb("restaurants-data",1,"restaurants").then(e=>e.transaction("restaurants","readwrite").objectStore("restaurants").put(t)).then(t=>{console.log("test success"),console.log(t)}).catch(t=>{console.log("test failed"),console.log(t)})}static addMissingData(t){return isNaN(t.photograph)?t.photograph=t.id+".jpg":t.photograph=t.photograph+".jpg",t}}class DBHelper{static get NEW_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurantById(t,e){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)e(n,null);else{const n=r.find(e=>e.id==t);n?e(null,n):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)e(n,null);else{const n=r.filter(e=>e.cuisine_type==t);e(null,n)}})}static fetchRestaurantByNeighborhood(t,e){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)e(n,null);else{const n=r.filter(e=>e.neighborhood==t);e(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,n){IDbOperationsHelper.getRestaurantsData((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),n(null,r)}})}static fetchNeighborhoods(t){IDbOperationsHelper.getRestaurantsData((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].neighborhood),r=e.filter((t,n)=>e.indexOf(t)==n);t(null,r)}})}static fetchCuisines(t){IDbOperationsHelper.getRestaurantsData((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].cuisine_type),r=e.filter((t,n)=>e.indexOf(t)==n);t(null,r)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){const n=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return n.addTo(newMap),n}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

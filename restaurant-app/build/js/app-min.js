navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(t=>{console.log("*** Service Worker registered ***")}).catch(function(t){console.log(t)}),function(){function t(t){return new Promise(function(e,r){t.onsuccess=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function e(e,r,n){var o,a=new Promise(function(a,s){t(o=e[r].apply(e,n)).then(a,s)});return a.request=o,a}function r(t,e,r){r.forEach(function(r){Object.defineProperty(t.prototype,r,{get:function(){return this[e][r]},set:function(t){this[e][r]=t}})})}function n(t,r,n,o){o.forEach(function(o){o in n.prototype&&(t.prototype[o]=function(){return e(this[r],o,arguments)})})}function o(t,e,r,n){n.forEach(function(n){n in r.prototype&&(t.prototype[n]=function(){return this[e][n].apply(this[e],arguments)})})}function a(t,r,n,o){o.forEach(function(o){o in n.prototype&&(t.prototype[o]=function(){return t=this[r],(n=e(t,o,arguments)).then(function(t){if(t)return new i(t,n.request)});var t,n})})}function s(t){this._index=t}function i(t,e){this._cursor=t,this._request=e}function u(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,r){t.oncomplete=function(){e()},t.onerror=function(){r(t.error)},t.onabort=function(){r(t.error)}})}function l(t,e,r){this._db=t,this.oldVersion=e,this.transaction=new c(r)}function p(t){this._db=t}r(s,"_index",["name","keyPath","multiEntry","unique"]),n(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(i,"_cursor",["direction","key","primaryKey","value"]),n(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(i.prototype[e]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[e].apply(r._cursor,n),t(r._request).then(function(t){if(t)return new i(t,r._request)})})})}),u.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},u.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(u,"_store",["name","keyPath","indexNames","autoIncrement"]),n(u,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(u,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(u,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new u(this._tx.objectStore.apply(this._tx,arguments))},r(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new u(this._db.createObjectStore.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},r(p,"_db",["name","version","objectStoreNames"]),o(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[u,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e,r=(e=arguments,Array.prototype.slice.call(e)),n=r[r.length-1],o=this._store||this._index,a=o[t].apply(o,r.slice(0,-1));a.onsuccess=function(){n(a.result)}})})}),[s,u].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var r=this,n=[];return new Promise(function(o){r.iterateCursor(t,function(t){t?(n.push(t.value),void 0===e||n.length!=e?t.continue():o(n)):o(n)})})})});var h={open:function(t,r,n){var o=e(indexedDB,"open",[t,r]),a=o.request;return a&&(a.onupgradeneeded=function(t){n&&n(new l(a.result,t.oldVersion,a.transaction))}),o.then(function(t){return new p(t)})},delete:function(t){return e(indexedDB,"deleteDatabase",[t])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var API_URL="http://localhost:1337/restaurants",fetchStatus=0,reviewsFetchStatus=0,DB_VERSION=1;class IDbOperationsHelper{static checkForIDbSupport(){return"indexedDB"in window?1:0}static openIDb(t,e,r){return idb.open(t,e,t=>{t.createObjectStore(r,{autoIncrement:!0})})}static addToDb(t,e,r,n){t.then(t=>{var o=t.transaction(e,r);return o.objectStore(e).put(n),o.complete}).then(t=>{console.log("Restaurant saved to IDB")})}static getAllData(t,e,r){t.then(t=>t.transaction(e).objectStore(r).getAll()).then(t=>{IDbOperationsHelper.setRestaurantsData(t)})}static getDataFromServer(t,e,r,n){fetch(API_URL).then(t=>t.json()).then(o=>{o.forEach(t=>{t=IDbOperationsHelper.addMissingData(t)}),1!=fetchStatus&&(fetchStatus=1,o.forEach(n=>{IDbOperationsHelper.addToDb(t,e,r,n)})),n(null,o)}).catch(t=>{n(t,null)})}static getRestaurantsData(t){var e=DB_VERSION,r=IDbOperationsHelper.openIDb("restaurants-data",e,"restaurants");r.then(t=>t.transaction("restaurants").objectStore("restaurants").getAll()).then(e=>{e.length<=0?IDbOperationsHelper.getDataFromServer(r,"restaurants","readwrite",t):t(null,e)})}static updateRestaurantData(t){var e=DB_VERSION;IDbOperationsHelper.openIDb("restaurants-data",e,"restaurants").then(e=>e.transaction("restaurants","readwrite").objectStore("restaurants").put(t)).then(t=>{console.log("test success"),console.log(t)}).catch(t=>{console.log("test failed"),console.log(t)})}static addMissingData(t){return isNaN(t.photograph)?t.photograph=t.id+".jpg":t.photograph=t.photograph+".jpg",t}static getReviewsFromServer(t,e,r,n){fetch("http://localhost:1337/reviews/").then(t=>t.json()).then(o=>{1!=reviewsFetchStatus&&(reviewsFetchStatus=1,o.forEach(n=>{IDbOperationsHelper.addToDb(t,e,r,n)})),n(null,o)}).catch(t=>{n(t,null)})}static getReviewsData(t){var e=DB_VERSION,r=IDbOperationsHelper.openIDb("restaurants-data",e,"reviews");r.then(t=>t.transaction("reviews","readwrite").objectStore("reviews").getAll()).then(e=>{e.length<=0?IDbOperationsHelper.getReviewsFromServer(r,"reviews","readwrite",t):t(null,e)}).catch(e=>{t(e,null)})}}class DBHelper{static get NEW_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurantById(t,e){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)e(r,null);else{const r=n.find(e=>e.id==t);r?e(null,r):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){IDbOperationsHelper.getRestaurantsData((n,o)=>{if(n)r(n,null);else{let n=o;"all"!=t&&(n=n.filter(e=>e.cuisine_type==t)),"all"!=e&&(n=n.filter(t=>t.neighborhood==e)),r(null,n)}})}static fetchNeighborhoods(t){IDbOperationsHelper.getRestaurantsData((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),n=e.filter((t,r)=>e.indexOf(t)==r);t(null,n)}})}static fetchCuisines(t){IDbOperationsHelper.getRestaurantsData((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),n=e.filter((t,r)=>e.indexOf(t)==r);t(null,n)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){const r=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return r.addTo(newMap),r}static fetchReviewsForRestaurant(t,e){IDbOperationsHelper.getReviewsData((r,n)=>{if(r)e(r,null);else{let r=n.filter(e=>e.restaurant_id==t);r?e(null,r):e("Review does not exist",null)}})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

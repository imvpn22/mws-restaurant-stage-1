navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(e=>{console.log("*** Service Worker registered ***")}).catch(function(e){console.log(e)}),function(){function e(e){return new Promise(function(t,r){e.onsuccess=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function t(t,r,n){var o,a=new Promise(function(a,s){e(o=t[r].apply(t,n)).then(a,s)});return a.request=o,a}function r(e,t,r){r.forEach(function(r){Object.defineProperty(e.prototype,r,{get:function(){return this[t][r]},set:function(e){this[t][r]=e}})})}function n(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return t(this[r],o,arguments)})})}function o(e,t,r,n){n.forEach(function(n){n in r.prototype&&(e.prototype[n]=function(){return this[t][n].apply(this[t],arguments)})})}function a(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return e=this[r],(n=t(e,o,arguments)).then(function(e){if(e)return new i(e,n.request)});var e,n})})}function s(e){this._index=e}function i(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function u(e){this._tx=e,this.complete=new Promise(function(t,r){e.oncomplete=function(){t()},e.onerror=function(){r(e.error)},e.onabort=function(){r(e.error)}})}function l(e,t,r){this._db=e,this.oldVersion=t,this.transaction=new u(r)}function p(e){this._db=e}r(s,"_index",["name","keyPath","multiEntry","unique"]),n(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(i,"_cursor",["direction","key","primaryKey","value"]),n(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(i.prototype[t]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[t].apply(r._cursor,n),e(r._request).then(function(e){if(e)return new i(e,r._request)})})})}),c.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(c,"_store",["name","keyPath","indexNames","autoIncrement"]),n(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(c,"_store",IDBObjectStore,["deleteIndex"]),u.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},r(u,"_tx",["objectStoreNames","mode"]),o(u,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new u(this._db.transaction.apply(this._db,arguments))},r(p,"_db",["name","version","objectStoreNames"]),o(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,r=(t=arguments,Array.prototype.slice.call(t)),n=r[r.length-1],o=this._store||this._index,a=o[e].apply(o,r.slice(0,-1));a.onsuccess=function(){n(a.result)}})})}),[s,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var r=this,n=[];return new Promise(function(o){r.iterateCursor(e,function(e){e?(n.push(e.value),void 0===t||n.length!=t?e.continue():o(n)):o(n)})})})});var h={open:function(e,r,n){var o=t(indexedDB,"open",[e,r]),a=o.request;return a&&(a.onupgradeneeded=function(e){n&&n(new l(a.result,e.oldVersion,a.transaction))}),o.then(function(e){return new p(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var API_URL="http://localhost:1337/restaurants",fetchStatus=0,reviewsFetchStatus=0,DB_VERSION=2;class IDbOperationsHelper{static checkForIDbSupport(){return"indexedDB"in window?1:0}static openIDb(e,t,r){return idb.open(e,t,e=>{e.createObjectStore(r,{autoIncrement:!0})})}static addToDb(e,t,r,n){e.then(e=>{var o=e.transaction(t,r);return o.objectStore(t).put(n),o.complete}).then(e=>(console.log("Data saved to IDB"),e)).catch(e=>e)}static getAllData(e,t,r){e.then(e=>e.transaction(t).objectStore(r).getAll()).then(e=>{IDbOperationsHelper.setRestaurantsData(e)})}static getDataFromServer(e,t,r,n){fetch(API_URL).then(e=>e.json()).then(o=>{o.forEach(e=>{e=IDbOperationsHelper.addMissingData(e)}),1!=fetchStatus&&(fetchStatus=1,o.forEach(n=>{IDbOperationsHelper.addToDb(e,t,r,n)})),n(null,o)}).catch(e=>{n(e,null)})}static getRestaurantsData(e){var t=DB_VERSION,r=IDbOperationsHelper.openIDb("restaurants-data",t,"restaurants");r.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(t=>{t.length<=0?IDbOperationsHelper.getDataFromServer(r,"restaurants","readwrite",e):e(null,t)})}static updateRestaurantData(e){var t=DB_VERSION;IDbOperationsHelper.openIDb("restaurants-data",t,"restaurants").then(t=>t.transaction("restaurants","readwrite").objectStore("restaurants").put(e)).then(e=>{console.log("test success"),console.log(e)}).catch(e=>{console.log("test failed"),console.log(e)})}static addMissingData(e){return isNaN(e.photograph)?e.photograph=e.id+".jpg":e.photograph=e.photograph+".jpg",e}static getReviewsFromServer(e,t,r,n){fetch("http://localhost:1337/reviews/").then(e=>e.json()).then(o=>{1!=reviewsFetchStatus&&(reviewsFetchStatus=1,o.forEach(n=>{IDbOperationsHelper.addToDb(e,t,r,n)})),n(null,o)}).catch(e=>{n(e,null)})}static getReviewsData(e){var t=DB_VERSION,r=IDbOperationsHelper.openIDb("reviews-data",t,"reviews");r.then(e=>e.transaction("reviews","readwrite").objectStore("reviews").getAll()).then(t=>{t.length<=0?IDbOperationsHelper.getReviewsFromServer(r,"reviews","readwrite",e):e(null,t)}).catch(t=>{e(t,null)})}static addReviewToIdb(e){var t=DB_VERSION,r=IDbOperationsHelper.openIDb("reviews-data",t,"reviews");IDbOperationsHelper.addToDb(r,"reviews","readwrite",e)}}class DBHelper{static get NEW_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurantById(e,t){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){IDbOperationsHelper.getRestaurantsData((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){IDbOperationsHelper.getRestaurantsData((n,o)=>{if(n)r(n,null);else{let n=o;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){IDbOperationsHelper.getRestaurantsData((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){IDbOperationsHelper.getRestaurantsData((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}static fetchReviewsForRestaurant(e,t){IDbOperationsHelper.getReviewsData((r,n)=>{if(r)t(r,null);else{let r=n.filter(t=>t.restaurant_id==e);r?t(null,r):t("Review does not exist",null)}})}static addReviewForRestaurant(e,t){IDbOperationsHelper.addReviewToIdb(e),t("Review added to IDB")}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
